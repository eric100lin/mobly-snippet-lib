buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9"
    }
}

plugins {
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'com.android.library'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME

        // Need to set up some project properties to publish to bintray.
        project.group = GROUP_ID
        project.archivesBaseName = ARTIFACT_ID
        project.version = VERSION_NAME
    }

    splits {
        abi {
          enable true
          reset()
          // Specifies a list of ABIs that Gradle should create APKs for.
          include "arm64-v8a", "armeabi-v7a", "armeabi"
          universalApk true
        }
    }

    lintOptions {
        abortOnError false
        checkAllWarnings true
        warningsAsErrors true
        disable 'HardwareIds','MissingApplicationIcon','GoogleAppIndexingWarning','InvalidPackage','OldTargetApi'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'junit:junit:4.13.2'
    implementation 'androidx.test:runner:1.4.0'
}

googleJavaFormat {
    options style: 'AOSP'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
//afterEvaluate {
//    publishing {
//        publications {
//            // Creates a Maven publication called "release".
//            release(MavenPublication) {
//                // Applies the component for the release build variant.
//                from components.release
//
//                name ARTIFACT_ID
//                groupId GROUP_ID
//                artifactId ARTIFACT_ID
//                version VERSION_NAME
//                description
//                'Android library for triggering device-side code from ' +
//                        'host-side Mobly tests.'
//                url 'https://github.com/google/mobly-snippet-lib'
//
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution 'repo'
//                    }
//                }
//
//                scm {
//                    connection 'https://github.com/google/mobly-snippet-lib.git'
//                    url 'https://github.com/google/mobly-snippet-lib'
//                }
//            }
//        }
//    }
//}

// Open lint's HTML report in your default browser or viewer.
task openLintReport(type: Exec) {
    def lint_report = "build/reports/lint-results.html"
    def cmd = "cat"
    def platform = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    if (platform.contains("linux")) {
        cmd = "xdg-open"
    } else if (platform.contains("mac os x")) {
        cmd = "open"
    } else if (platform.contaiafterEvaluatens("windows")) {
        cmd = "launch"
    }
    commandLine cmd, lint_report
}

task presubmit {
    dependsOn { ['googleJavaFormat', 'lint', 'openLintReport'] }
    doLast {
        println "Fix any lint issues you see. When it looks good, submit the pull request."
    }
}